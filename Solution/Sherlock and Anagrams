'''
Two strings are anagrams of each other if the letters of one string can be rearranged to form the other string. Given a string, find the number of pairs of substrings of the string that are anagrams of each other.
'''

#!/bin/python3

import math
import os
import random
import re
import sys
from collections import Counter

#
# Complete the 'sherlockAndAnagrams' function below.
#
# The function is expected to return an INTEGER.
# The function accepts STRING s as parameter.
#

def sherlockAndAnagrams(s):
    # Write your code here
    count=0
    ana_list=[]
    for i in range(len(s)):
        for j in range(i+1,len(s)+1): 
            if sorted(s[i:j]) in ana_list: #sort the characters in the string
                count+=ana_list.count(sorted(s[i:j])) #check the number of occurence of the substing and add it to the total count
            ana_list.append(sorted(s[i:j])) #add the sorted substring to the list
    return count       

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        s = input()

        result = sherlockAndAnagrams(s)

        fptr.write(str(result) + '\n')

    fptr.close()
